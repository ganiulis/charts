# Some prerequisites:
# 1. Create a Secret to store environmental variables:
#     kubectl create secret generic [CONTAINER_NAME]-env --from-env-file=[ENV_FILE]
#
# 2. Make sure DNS is configured to point the domain name to the server IP.

# Recommended to change from the default namespace.
namespace: default

# Labels all objects (metadata.labels.environment).
environment: test

# Resolves all Kubernetes objects to the same name.
name: api

container:
  replicas: 2
  version: latest

  # Fully-qualified image name.
  image: traefik/whoami
 
  # Container port.
  port: 8080 

  # Pulls the image from a private registry. 
  #
  # Create a Secret to store a private registry token:
  #   kubectl create secret generic regcred --from-file=.dockerconfigjson=[DOCKER_CONFIG_JSON] --type=kubernetes.io/dockerconfigjson
  #
  # See https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/.
  #
  imagePullSecret: regcred 

# Optional.
#
# Runs an image before the primary container starts.
#
# Create a Secret beforehand:
#   kubectl create secret generic [CONTAINER_NAME]-init-env --from-env-file=[ENV_FILE]
#
# Useful for running migrations.
#
initContainer:
  image: busybox
  args: ["-la"]

  # Optional.
  #
  # Mount a readonly volume.
  #
  # Create a ConfigMap beforehand:
  #   kubectl create configmap [CONTAINER_NAME]-init ...
  #
  mountPath: /data/migrations

host:
  domain: example.com

  # Optional.
  #
  # Empty host.subdomain adds www routing when removed: https://www.example.com.
  # 
  # Empty host.path skips Middleware object creation when removed.
  #
  # This example resolves to https://test.example.com/api.
  #
  subdomain: test
  path: /api

# Optional, but highly recommended.
#
# Creates a ClusterIssuer for SSL/TLS with Let's Encrypt.
#
# Requires cert-manager to be configured beforehand.
#
# See https://cert-manager.io/docs/installation/kubectl/.
#
certification:
  # Optional.
  email: steve@example.com

  # Optional.
  #
  # For Cloudflare users.
  #
  # Requires a Secret with a stored Cloudflare API key.
  #
  # Create the Secret:
  #   kubectl create secret generic cloudflare --from-literal=token=[CLOUDFLARE_API_TOKEN]
  #
  # See https://nolifelover.medium.com/create-cert-manager-clustterissuer-with-cloudflare-for-automate-issue-and-renew-lets-encrypt-ssl-4877d3f12b44.
  #
  cloudflare:
    secretName: cloudflare
    key: token

# Multiple volumes are allowed.
volumes:
  # Optional.
  #
  # Sets the gid for the mounted volumes.
  #
  # Allows to write to directories if the user is not root.
  #
  # Find your desired gid:
  #   getent group [GROUP_NAME]
  #
  # The default is the root user gid.
  #
  groupId: 0

  list:
    # Optional.
    #
    # Mounts a single readonly file. Useful for mounting .env files.
    #
    # Specific files are pulled from a pre-created Secret.
    #
    # Create a Secret to store the file:
    #   kubectl create secret generic [CONTAINER_NAME]-[VOLUME_NAME] ...
    #
    - name: dotenv
      containerPath: /srv/api/
      hostPath: 
      file: .env

    # Optional.
    #
    # Mounts a directory.
    #
    # Creates a PersistentVolume and PersistentVolumeClaim.
    #
    - name: assets
      containerPath: /srv/api/public/assets
      hostPath: /data/api/assets
      file:
